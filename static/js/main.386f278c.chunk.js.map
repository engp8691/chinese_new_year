{"version":3,"sources":["Link.js","Celebrate.js","Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Link","props","selectedClass","selected","react_default","a","createElement","className","onClick","children","Celebrate","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","img_url","Math","floor","random","react","hanleClick","src","alt","Component","Wrapper","handleClick","e","target","textContent","console","log","luckyNumber","isNaN","parseInt","setState","redNumber","handleCelebrateClick","numbers","_this2","AllLinks","map","elem","index","array","isSelected","tail","length","divKey","key","src_Link","src_Celebrate","App","src_Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAeeA,QAZF,SAACC,GACb,IAAIC,EAAgB,OAIpB,OAHGD,EAAME,WACRD,EAAgB,WAGZE,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAeM,QAASP,EAAMO,SAC/CP,EAAMQ,YC2BIC,cAjCd,SAAAA,EAAYT,GAAM,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KACDiB,MAAM,CAACC,SAAS,GAFJR,wEAMjB,IAGIS,EAHS,CAAC,4FAA6F,4FAA6F,4FAA6F,4FAA6F,8HAEhXC,KAAKC,MAAsB,EAAhBD,KAAKE,WAGlC,OAAIT,KAAKb,MAAMkB,SAGXL,KAAKI,MAAMC,QAEZf,EAAAC,EAAAC,cAACkB,EAAA,SAAD,KACCpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBC,QAASM,KAAKb,MAAMwB,YAAtD,KACArB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKoB,IAAKN,EAASZ,QAASM,KAAKb,MAAMwB,WAAYE,IAAI,SAT1D,YAbcC,aCoETC,cAhEd,SAAAA,EAAY5B,GAAM,IAAAU,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACjBlB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMb,KAMP6B,YAAc,SAACC,GACd,IAAGpB,EAAKO,MAAMC,QAAd,CADoB,IAGda,EAAWD,EAAXC,OACAC,EAAgBD,EAAhBC,YAENC,QAAQC,IAAI,GAAIH,EAAQC,EAAatB,EAAKO,MAAMkB,aAC5CC,MAAMJ,KACTA,EAAcK,SAASL,IAGxB,IAAId,GAAU,EACXR,EAAKO,MAAMkB,cAAgBH,IAC7Bd,GAAU,GAGXR,EAAK4B,SAAS,CAACC,UAAWP,EAAad,QAASA,MAvB/BR,EA0BlB8B,qBAAuB,SAACV,GACvB,IAAIK,EAAcf,KAAKC,MAAsB,GAAhBD,KAAKE,UAClCZ,EAAK4B,SAAS,CAACpB,SAAS,EAAOiB,YAAaA,KA1B5C,IAAIA,EAAcf,KAAKC,MAAsB,GAAhBD,KAAKE,UAFjB,OAGjBa,GAAe,EACfzB,EAAKO,MAAQ,CAACwB,QAASzC,EAAMyC,QAASF,WAAY,EAAGrB,SAAS,EAAOiB,YAAaA,GAJjEzB,wEA+BT,IAAAgC,EAAA7B,KACF8B,EAAW9B,KAAKI,MAAMwB,QAAQG,IAAI,SAACC,EAAMC,EAAOC,GAErD,IAAIC,GAAa,EACdH,IAASH,EAAKzB,MAAMsB,YACtBN,QAAQC,IAAI,GAAIW,GAChBG,GAAa,GAEd,IAAIC,EAAQ9C,EAAAC,EAAAC,cAAA,kBACTyC,IAAUC,EAAMG,OAAO,IACzBD,EAAO,MAER,IAAIE,EAAS,MAAQN,EACrB,OAAQ1C,EAAAC,EAAAC,cAACkB,EAAA,SAAD,CAAU6B,IAAKD,GAAQhD,EAAAC,EAAAC,cAACgD,EAAD,CAAM9C,QAASmC,EAAKb,YAAa3B,SAAU8C,GAAaH,GAA/E,IAA6FI,EAA7F,OAKT,OAFAhB,QAAQC,IAAI,GAAIrB,KAAKI,MAAMC,SAG1Bf,EAAAC,EAAAC,cAACkB,EAAA,SAAD,KACApB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,+IAEDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAACiD,EAAD,CAAWpC,QAASL,KAAKI,MAAMC,QAASM,WAAYX,KAAK2B,uBACzDrC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACJsC,WA1DiBhB,aCQP4B,mLARX,OACEpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBH,EAAAC,EAAAC,cAACmD,EAAD,CAASf,QAHI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,cAFlBd,aCSE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.386f278c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst Link = (props) => {\n\tlet selectedClass = \"link\";\n\tif(props.selected){\n\t\tselectedClass = \"redlink\";\n\t}\n\treturn (\n      <div className={selectedClass} onClick={props.onClick}>\n\t  \t{props.children}\n      </div>\n    );\n}\n\nexport default Link;\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\n\nclass Celebrate extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={display: true};\n\t}\n\n\trender() {\n\t\tlet images = [\"https://t3.ftcdn.net/jpg/02/13/13/70/500_F_213137035_psgI3vjEDlMD9NQuELFGOSdCjepK4dCj.jpg\", \"https://t4.ftcdn.net/jpg/01/00/48/91/500_F_100489124_qE3z0Wqq5fLYAd7CNjMTW6ZTfBGNHLSy.jpg\", \"https://t4.ftcdn.net/jpg/01/89/13/49/500_F_189134983_4t1exHfKmyxJjMIlXLozDW9GZIBCejeZ.jpg\", \"https://t3.ftcdn.net/jpg/01/89/00/52/500_F_189005268_DFOEZfXVekzAfHLSfVG78XQTjiYWs3Dw.jpg\", \"https://www.clipartmax.com/png/middle/68-684764_dragon-dance-lion-dance-chinese-new-year-cartoon-chinese-new-year-lion.png\"];\n\n\t\tlet luckyNumber = Math.floor(Math.random() * 4);\n\t\tlet img_url = images[luckyNumber];\n\n\t\tif(!this.props.display){\n\t\t\treturn null;\n\t\t}else{\n\t\t\tif(this.state.display){\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className=\"hover_bkgr_fricc\">\n\t\t\t\t\t\t\t<span className=\"helper\"></span>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div className=\"popupCloseButton\" onClick={this.props.hanleClick}>X</div>\n\t\t\t\t\t\t\t\t<div><img src={img_url} onClick={this.props.hanleClick} alt=\"\"></img></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t);\n\t\t\t}else{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default Celebrate;\n","import React, { Component, Fragment } from 'react';\nimport Link from './Link';\nimport Celebrate from './Celebrate';\n\nimport './App.css';\n\nclass Wrapper extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tlet luckyNumber = Math.floor(Math.random() * 10);\n\t\tluckyNumber += 1;\n\t\tthis.state = {numbers: props.numbers, redNumber: -1, display: false, luckyNumber: luckyNumber};\n\t}\n\n\thandleClick = (e) => {\n\t\tif(this.state.display) return;\n\n\t\tlet { target } = e;\n\t\tlet { textContent } = target;\n\n\t\tconsole.log(12, target, textContent, this.state.luckyNumber);\n\t\tif(!isNaN(textContent)){\n\t\t\ttextContent = parseInt(textContent);\n\t\t}\n\n\t\tlet display = false;\n\t\tif(this.state.luckyNumber === textContent){\n\t\t\tdisplay = true;\n\t\t}\n\n\t\tthis.setState({redNumber: textContent, display: display});\n\t};\n\n\thandleCelebrateClick = (e) => {\n\t\tlet luckyNumber = Math.floor(Math.random() * 10);\n\t\tthis.setState({display: false, luckyNumber: luckyNumber});\n\t}\n\n\trender() {\n\t\tconst AllLinks = this.state.numbers.map((elem, index, array)=>{\n\t\t\t// console.log(21, elem, this.state.redNumber, index, array.length);\n\t\t\tlet isSelected = false;\n\t\t\tif(elem === this.state.redNumber){\n\t\t\t\tconsole.log(24, elem);\n\t\t\t\tisSelected = true;\n\t\t\t}\n\t\t\tlet tail = (<span>=></span>);\n\t\t\tif(index === array.length-1){\n\t\t\t\ttail = null;\n\t\t\t}\n\t\t\tlet divKey = \"div\" + elem;\n\t\t\treturn (<Fragment key={divKey}><Link onClick={this.handleClick} selected={isSelected}>{elem}</Link> {tail} </Fragment> );\n\t\t});\n\n\t\tconsole.log(41, this.state.display);\n\t\t\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t<div className=\"greetings\">\n\t\t\t\t<span>看看您的手气如何，选择你的幸运号码，有惊喜</span>\n\t\t\t</div>\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<Celebrate display={this.state.display} hanleClick={this.handleCelebrateClick}/>\n\t\t\t\t<br/><br/>\n\t\t\t\t{AllLinks}\n\t\t\t</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport Wrapper from './Wrapper';\n\nclass App extends Component {\n  render() {\n  \tlet myArray = [1,2,3,4,5,6,7,8,9,10];\n    return (\n      <div className=\"App\">\n\t  \t<Wrapper numbers={myArray}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}